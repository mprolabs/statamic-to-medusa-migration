@startuml Saleor Multi-Language Architecture

' Define styles
skinparam component {
  BackgroundColor<<Client>> #F8F9FA
  BorderColor<<Client>> #6C757D
  BackgroundColor<<Language>> #E6CCFF
  BorderColor<<Language>> #7952B3
  BackgroundColor<<API>> #E6F3FF
  BorderColor<<API>> #0D6EFD
  BackgroundColor<<Store>> #E6F9F7
  BorderColor<<Store>> #20C997
  BackgroundColor<<Database>> #F8F0FF
  BorderColor<<Database>> #6F42C1
  BackgroundColor<<Content>> #F0F7DF
  BorderColor<<Content>> #7CB518
}

title Saleor Multi-Language Implementation Architecture

' Client Layer
package "Client Layer" {
  component [User Browser] as Browser <<Client>>
  component [Language Preference Cookie] as LangCookie <<Client>>
}

' Frontend Layer
package "Next.js Frontend Layer" {
  component [Language Detection] as LangDetection <<Language>>
  component [Language Middleware] as LangMiddleware <<Language>>
  component [Next.js i18n] as i18n <<Language>>
  component [Language Switcher UI] as LangSwitcher <<Language>>
  component [Translated UI Components] as TranslatedUI <<Language>>
  component [Language URL Structure\n(/nl/, /de/, etc.)] as LangURL <<Language>>
  
  note right of LangDetection
    Detects user's preferred language from:
    1. URL path segment
    2. Cookie
    3. Browser settings
  end note
  
  note right of LangURL
    SEO-friendly URL structure with
    language as a path segment
  end note
}

' API Layer
package "API Layer" {
  component [GraphQL API] as API <<API>>
  component [Language Context] as LangContext <<Language>>
  component [GraphQL with Language Variables] as GraphQLLang <<API>>
}

' Store Layer
package "Saleor Core Layer" {
  component [Translation Management] as TranslationMgmt <<Language>>
  component [Product Module] as ProductModule <<Store>>
  component [Content Module] as ContentModule <<Store>>
  component [SEO Management] as SEOModule <<Store>>
}

' Database Layer
package "Database Layer" {
  database "PostgreSQL" as DB <<Database>> {
    [Base Language Content] as BaseContent
    [Translation Entries] as Translations
    [Language Metadata] as LangMeta
  }
}

' Connections
Browser --> LangDetection
Browser --> LangCookie
LangCookie --> LangDetection

LangDetection --> LangMiddleware
LangMiddleware --> i18n
LangMiddleware --> LangURL
LangURL --> GraphQLLang

TranslatedUI --> i18n
LangSwitcher --> LangDetection
LangSwitcher --> LangURL

i18n --> GraphQLLang
GraphQLLang --> API
LangMiddleware --> LangContext
LangContext --> API

API --> TranslationMgmt
API --> ProductModule
API --> ContentModule
API --> SEOModule

TranslationMgmt --> BaseContent
TranslationMgmt --> Translations
TranslationMgmt --> LangMeta

ProductModule --> BaseContent
ProductModule --> Translations
ContentModule --> BaseContent
ContentModule --> Translations
SEOModule --> BaseContent
SEOModule --> Translations

note bottom of Translations
  Translation entries store:
  - Related object ID
  - Field name
  - Language code
  - Translated content
end note

note bottom of i18n
  Provides:
  - Translation functions
  - Format handling (dates, numbers)
  - Right-to-left support
end note

note bottom of LangContext
  GraphQL requests always include
  the current language context
end note

@enduml 