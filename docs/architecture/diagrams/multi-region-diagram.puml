@startuml Saleor Multi-Region Architecture

' Define styles
skinparam component {
  BackgroundColor<<Client>> #F8F9FA
  BorderColor<<Client>> #6C757D
  BackgroundColor<<Routing>> #FFE6CC
  BorderColor<<Routing>> #FD7E14
  BackgroundColor<<API>> #E6F3FF
  BorderColor<<API>> #0D6EFD
  BackgroundColor<<Channel>> #FFF0E6
  BorderColor<<Channel>> #FF7F41
  BackgroundColor<<Module>> #E6F9F7
  BorderColor<<Module>> #20C997
  BackgroundColor<<Database>> #F8F0FF
  BorderColor<<Database>> #6F42C1
  BackgroundColor<<Content>> #F0F7DF
  BorderColor<<Content>> #7CB518
}

title Saleor Multi-Region Architecture with Channel System

' Domain Layer
package "Domain Layer" {
  component [nl.domain.com] as DomainNL <<Client>>
  component [be.domain.com] as DomainBE <<Client>>
  component [de.domain.com] as DomainDE <<Client>>
}

' Routing Layer
package "Routing & Caching Layer" {
  component [Domain-based Routing] as DomainRouting <<Routing>>
  component [Region Detection Middleware] as RegionDetection <<Routing>>
  component [CDN / Edge Caching] as CDN <<Routing>>
}

' Next.js Layer
package "Next.js Storefront Layer" {
  component [NL Storefront] as StoreNL <<Client>>
  component [BE Storefront] as StoreBE <<Client>>
  component [DE Storefront] as StoreDE <<Client>>
  
  component [Apollo GraphQL Client\nwith Channel Context] as ApolloClient <<API>>
  component [Region-specific Configuration] as RegionConfig <<Routing>>
}

' Saleor API Layer
package "Saleor API Layer" {
  component [GraphQL API] as API <<API>>
  component [Channel Context Provider] as ChannelProvider <<API>>
  component [Authentication with JWT] as Auth <<API>>
}

' Channel Management Layer
package "Channel Management Layer" {
  component [Channel Registry] as ChannelRegistry <<Channel>>
  
  package "Channel Configuration" {
    component [Netherlands Channel] as ChannelNL <<Channel>>
    note right of ChannelNL
      - Currency: EUR
      - Tax rates: Dutch VAT
      - Shipping zones: NL
      - Payment methods: iDeal, etc.
    end note
    
    component [Belgium Channel] as ChannelBE <<Channel>>
    note right of ChannelBE
      - Currency: EUR
      - Tax rates: Belgian VAT
      - Shipping zones: BE
      - Payment methods: Bancontact, etc.
    end note
    
    component [Germany Channel] as ChannelDE <<Channel>>
    note right of ChannelDE
      - Currency: EUR
      - Tax rates: German VAT
      - Shipping zones: DE
      - Payment methods: SEPA, etc.
    end note
  }
}

' Module Layer
package "Module Layer" {
  component [Product Module] as ProductModule <<Module>>
  component [Order Module] as OrderModule <<Module>>
  component [Checkout Module] as CheckoutModule <<Module>>
  component [Customer Module] as CustomerModule <<Module>>
  component [Shipping Module] as ShippingModule <<Module>>
  component [Payment Module] as PaymentModule <<Module>>
  component [Tax Module] as TaxModule <<Module>>
}

' Content Layer
package "Content Layer" {
  component [Content Management] as Content <<Content>>
  component [Channel-specific Content] as ChannelContent <<Content>>
}

' Database Layer
package "Database Layer" {
  database "PostgreSQL" as DB <<Database>> {
    [Channel Data] as ChannelData
    [Products] as Products
    [Prices by Channel] as Prices
    [Region-specific Settings] as RegionSettings
  }
  
  database "Redis\n(Cache)" as Redis <<Database>>
}

' Connections
DomainNL --> DomainRouting
DomainBE --> DomainRouting
DomainDE --> DomainRouting

DomainRouting --> RegionDetection
RegionDetection --> CDN

CDN --> StoreNL
CDN --> StoreBE
CDN --> StoreDE

StoreNL --> RegionConfig
StoreBE --> RegionConfig
StoreDE --> RegionConfig

RegionConfig --> ApolloClient

ApolloClient --> API
API --> Auth
API --> ChannelProvider

ChannelProvider --> ChannelRegistry
ChannelRegistry --> ChannelNL
ChannelRegistry --> ChannelBE
ChannelRegistry --> ChannelDE

ChannelNL --> ProductModule
ChannelBE --> ProductModule
ChannelDE --> ProductModule

ChannelNL --> OrderModule
ChannelBE --> OrderModule
ChannelDE --> OrderModule

ChannelNL --> CheckoutModule
ChannelBE --> CheckoutModule
ChannelDE --> CheckoutModule

CheckoutModule --> ShippingModule
CheckoutModule --> PaymentModule
CheckoutModule --> TaxModule

ProductModule --> ChannelData
OrderModule --> ChannelData
CheckoutModule --> ChannelData
CustomerModule --> ChannelData
ShippingModule --> RegionSettings
PaymentModule --> RegionSettings
TaxModule --> RegionSettings
ProductModule --> Products
ProductModule --> Prices

ChannelNL --> ChannelContent
ChannelBE --> ChannelContent
ChannelDE --> ChannelContent
ChannelContent --> Content

ProductModule --> Redis
OrderModule --> Redis
CheckoutModule --> Redis

note bottom of RegionConfig
  Environment-based configuration
  for each region/domain
end note

note bottom of ChannelProvider
  Injects channel context into
  all GraphQL operations
end note

note bottom of Prices
  Products can have different
  prices for each channel
end note

@enduml 