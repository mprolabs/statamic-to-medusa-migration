@startuml
title Medusa Architecture Diagram

' Styling
skinparam backgroundColor white
skinparam componentStyle rectangle

' Client Layer
actor "Storefront" as storefront
actor "Admin Dashboard" as admin

' HTTP Layer
package "HTTP Layer" {
  component "API Routes (Express.js)" as api
}
note bottom of api
  Express.js-based API handling
  REST endpoints for commerce operations
end note

' Workflow Layer
package "Workflow Layer" {
  component "Product Workflows" as product_wf
  component "Order Workflows" as order_wf
  component "Customer Workflows" as customer_wf
  component "Payment Workflows" as payment_wf
}
note bottom of product_wf
  Encapsulates business logic
  and orchestrates operations
end note

' Module Layer
package "Module Layer" {
  component "Product Module" as product_mod
  component "Order Module" as order_mod
  component "Customer Module" as customer_mod
  component "Payment Module" as payment_mod
  component "Inventory Module" as inventory_mod
}
note bottom of product_mod
  Domain-specific modules for
  resource management
end note

' Data Store Layer
package "Data Store Layer" {
  database "PostgreSQL" as postgres
  database "Redis" as redis
}
note right of postgres
  Primary data store for 
  commerce data
end note
note right of redis
  Session storage and
  caching service
end note

' Content Management
package "Content Platform" {
  component "Strapi CMS" as strapi
}
note right of strapi
  Headless CMS for managing
  content & media
end note

' Data Migration
package "Data Migration" {
  component "Migration Tools" as migration
}

' Connections
storefront --> api : HTTP Requests
admin --> api : HTTP Requests

api --> product_wf : Execute
api --> order_wf : Execute
api --> customer_wf : Execute
api --> payment_wf : Execute

product_wf --> product_mod : Use
order_wf --> order_mod : Use
customer_wf --> customer_mod : Use
payment_wf --> payment_mod : Use

product_mod --> postgres : Query/Store
order_mod --> postgres : Query/Store
customer_mod --> postgres : Query/Store
payment_mod --> postgres : Query/Store
inventory_mod --> postgres : Query/Store

api --> redis : Session Management
api --> strapi : Content API Calls

migration --> postgres : Migrate Data
migration --> strapi : Migrate Content

@enduml 