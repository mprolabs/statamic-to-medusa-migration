name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'docs/**'
      - 'src/architecture/diagrams/**'
      - '.github/workflows/github-pages.yml'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java for PlantUML
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Generate Diagrams
        run: |
          mkdir -p docs/assets/images
          curl -L -o plantuml.jar https://sourceforge.net/projects/plantuml/files/plantuml.jar/download
          if [ -d "src/architecture/diagrams" ]; then
            cd src/architecture/diagrams
            for file in *.puml; do
              if [ -f "$file" ]; then
                echo "Rendering $file"
                java -jar ../../../plantuml.jar -tsvg "$file"
                mv "${file%.puml}.svg" ../../../docs/assets/images/
              fi
            done
            cd ../../..
          fi
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.6.10'
          bundler-cache: true
          bundler: 'latest'
          cache-version: 1
          working-directory: './docs'
      - name: Build with Jekyll
        run: |
          cd docs
          bundle config set --local path 'vendor/bundle'
          bundle install
          # Extract repository name without owner
          REPO_NAME=$(echo "${{ github.repository }}" | awk -F/ '{print $2}')
          bundle exec jekyll build --baseurl "/$REPO_NAME"
        env:
          JEKYLL_ENV: production
      - name: Deploy to GitHub Pages branch
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_site
          destination_dir: .
          enable_jekyll: false
          force_orphan: true

  # Original deployment job - keep as a backup
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4